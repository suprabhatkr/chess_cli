package chess_cli;
import java.util.ArrayList;

public class ChessBoardCli {

    private ArrayList<ArrayList<ChessSquareCli>> chessBoard;
    
    public ChessBoardCli() {
    	chessBoard = new ArrayList<>();
    	initializeSquares();
    }
    
    private void initializeSquares() {
    	for (int i = 0; i < 8; i++) {
    		ArrayList<ChessSquareCli> chessRow = new ArrayList<>();
    		for (int j = 0; j < 8; j++) {
    			chessRow.add(new ChessSquareCli());
    		}
    		chessBoard.add(chessRow);
    	}
    }
    
    private void initializePieces() {
    	int sideAdjuster, row, color;
        ChessPiece chessPiece;

        if (getCurrentPlayer() == getPlayer(0)) {
            sideAdjuster = 7;
        } else {
            sideAdjuster = 0;
        }
        for (int i=0; i < 2; i++) {
            if (getPlayer(i).isWhite()) {
                row = Math.abs(sideAdjuster);
            } else {
                row = Math.abs(sideAdjuster - 7);
            }

            color = getPlayer(i).getColor();

            chessPiece = new Rook(color, this, row, 0);
            getPlayer(i).addChessPiece(chessPiece);
            chessBoard.getChessSquare(row, 0).setChessPiece(chessPiece);

            chessPiece = new Knight(color, this, row, 1);
            getPlayer(i).addChessPiece(chessPiece);
            chessBoard.getChessSquare(row, 1).setChessPiece(chessPiece);

            chessPiece = new Bishop(color, this, row, 2);
            getPlayer(i).addChessPiece(chessPiece);
            chessBoard.getChessSquare(row, 2).setChessPiece(chessPiece);

            chessPiece = new Queen(color, this, row, 3);
            getPlayer(i).addChessPiece(chessPiece);
            chessBoard.getChessSquare(row, 3).setChessPiece(chessPiece);

            chessPiece = new King(color, this, row, 4);
            getPlayer(i).addChessPiece(chessPiece);
            chessBoard.getChessSquare(row, 4).setChessPiece(chessPiece);

            chessPiece = new Bishop(color, this, row, 5);
            getPlayer(i).addChessPiece(chessPiece);
            chessBoard.getChessSquare(row, 5).setChessPiece(chessPiece);

            chessPiece = new Knight(color, this, row, 6);
            getPlayer(i).addChessPiece(chessPiece);
            chessBoard.getChessSquare(row, 6).setChessPiece(chessPiece);

            chessPiece = new Rook(color, this, row, 7);
            getPlayer(i).addChessPiece(chessPiece);
            chessBoard.getChessSquare(row, 7).setChessPiece(chessPiece);

            for (int col = 0; col < 8; col++) {
                chessPiece = new Pawn(color, this, Math.abs(row - 1), col);
                getPlayer(i).addChessPiece(chessPiece);
                chessBoard.getChessSquare(Math.abs(row - 1), col).setChessPiece(chessPiece);
            }

        }
    }
    
    public ArrayList<ArrayList<ChessSquareCli>> getChessBoard() {
    	return chessBoard;
    }

    public GridLayout getChessBoardLayout() {
        return this.chessBoardLayout;
    }

    public void setChessBoardLayout(GridLayout chessBoardLayout) {
        this.chessBoardLayout = chessBoardLayout;
        generateSquares();
    }

    public void generateSquares() {
        chessSquares = new ChessSquare[10][10];
        for (int column = 9; column >= 0; column --) {
            for (int row = 9; row >= 0; row--) {
                if (column == 0 || column == 9 || row == 0 || row == 9)
                    chessBoardLayout.addView(CellLayout.getCellView(chessBoardLayout.getContext(), row, column, gameType));
                else
                    chessSquares[row - 1][column -1 ] = new ChessSquare(row - 1, column - 1, this.chessBoardLayout);
            }
        }
    }

    public ChessSquare getChessSquare(int row, int column) {
        return chessSquares[row][column];
    }

    public void setCurrentValidMoves(ArrayList<ChessSquare> validMoves) {
        disableClickOnValidMoves();
        this.currentValidMoves = validMoves;
    }

    public ArrayList<ChessSquare> getCurrentValidMoves() {
        return currentValidMoves;
    }

    public void disableClickOnValidMoves() {
        if (getCurrentValidMoves() != null){
            for (ChessSquare chessSquare : getCurrentValidMoves()) {
                // Log.w("DISABLE", chessSquare.getRow() + " " + chessSquare.getColumn());
                chessSquare.changeColor(chessSquare.getColor());
            }
        }
    }
}
